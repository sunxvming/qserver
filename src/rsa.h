/////////////////////////////// RSA //////////////////////////////
#include "openssl/x509.h"

static int DoPublicKeyEncryption( const unsigned char* key, size_t key_size, const unsigned char* from, size_t from_size, unsigned char* to, int to_size )
{
	const unsigned char* ucp = key;
	RSA* rsa = d2i_RSA_PUBKEY( NULL, &ucp, (long)key_size );
	if ( NULL == rsa )
		return 0;

	int padding = RSA_PKCS1_PADDING;
	int flen = RSA_size( rsa );
	flen -= 11;

	unsigned char* from_temp = (unsigned char*) malloc( flen );
	unsigned char* to_temp = (unsigned char*) malloc( ( flen + 11 ) << 1 );
	size_t fsurlen = from_size;
	int to_count = 0;

	for ( int i = 0; fsurlen > 0; i ++ )
	{
		memset( from_temp, 0x00, flen );
		memset( to_temp, 0x00, ( flen + 11 ) << 1 );
		memcpy( from_temp, &from[ flen * i ], flen );
		fsurlen -= flen;
		int result = RSA_public_encrypt( flen, from_temp, to_temp, rsa, padding );
		if( -1 == result )
		{
			to_count = 0;
			break;
		}

		memcpy( to + to_count, to_temp, result );
		to_count += result;
		if ( ( to_count + result ) > to_size )
		{
			to_count = 0;
			break;
		}
	}

	free( from_temp );
	free( to_temp );
	return to_count;
}

static int DoPublicKeyDecryption( const unsigned char* key, size_t key_size, const unsigned char* from, size_t from_size, unsigned char* to, int to_size )
{
	const unsigned char* ucp = key;
	RSA* rsa = d2i_RSA_PUBKEY( NULL, &ucp, (long)key_size );
	if ( NULL == rsa )
		return 0;

	int padding = RSA_PKCS1_PADDING;
	int flen = RSA_size( rsa );

	unsigned char* from_temp = (unsigned char*) malloc( flen );
	unsigned char* to_temp = (unsigned char*) malloc( flen );
	size_t fsurlen = from_size;
	int to_count = 0;

	for ( int i = 0; fsurlen > 0; i ++ )
	{
		memset( from_temp, 0x00, flen );
		memset( to_temp, 0x00, flen );
		memcpy( from_temp, &from[ flen * i ], flen );
		fsurlen -= flen;
		int result = RSA_public_decrypt( flen, from_temp, to_temp, rsa, padding );
		if ( -1 == result )
		{
			to_count = 0;
			break;
		}

		memcpy( to + to_count, to_temp, result );
		to_count += result;
		if ( ( to_count + result ) > to_size )
		{
			to_count = 0;
			break;
		}
	}

	free( from_temp );
	free( to_temp );
	return to_count;
}

static int DoPrivateKeyEncryption( const unsigned char* key, size_t key_size, const unsigned char* from, size_t from_size, unsigned char* to, int to_size )
{
	const unsigned char* ucp = key;
	RSA* rsa = d2i_RSA_PUBKEY( NULL, &ucp, (long)key_size );
	if ( NULL == rsa )
		return 0;

	int padding = RSA_PKCS1_PADDING;
	int flen = RSA_size( rsa );
	flen -= 11;

	unsigned char* from_temp = (unsigned char*) malloc( flen );
	unsigned char* to_temp = (unsigned char*) malloc( ( flen + 11 ) << 1 );
	size_t fsurlen = from_size;
	int to_count = 0;

	for ( int i = 0; fsurlen > 0; i ++ )
	{
		memset( from_temp, 0x00, flen );
		memset( to_temp, 0x00, ( flen + 11 ) << 1 );
		memcpy( from_temp, &from[ flen * i ], flen );
		fsurlen -= flen;
		int result = RSA_private_encrypt( flen, from_temp, to_temp, rsa, padding );
		if ( -1 == result )
		{
			to_count = 0;
			break;
		}

		memcpy( to + to_count, to_temp, result );
		to_count += result;
		if ( ( to_count + result ) > to_size )
		{
			to_count = 0;
			break;
		}
	}

	free( from_temp );
	free( to_temp );
	return to_count;
}

static int DoPrivateKeyDecryption( const unsigned char* key, size_t key_size, const unsigned char* from, size_t from_size, unsigned char* to, int to_size )
{
	const unsigned char* ucp = key;
	RSA* rsa = d2i_RSA_PUBKEY( NULL, &ucp, (long)key_size );
	if ( NULL == rsa )
		return 0;

	int padding = RSA_PKCS1_PADDING;	
	int flen = RSA_size( rsa );

	unsigned char* from_temp = (unsigned char*) malloc( flen );
	unsigned char* to_temp = (unsigned char*) malloc( flen );
	size_t fsurlen = from_size;
	int to_count = 0;

	for ( int i = 0; fsurlen > 0; i ++ )
	{
		memset( from_temp, 0x00, flen );
		memset( to_temp, 0x00, flen );
		memcpy( from_temp, &from[ flen * i ], flen );
		fsurlen -= flen;
		int result = RSA_private_decrypt( flen, from_temp, to_temp, rsa, padding );
		if ( -1 == result )
		{
			to_count = 0;
			break;
		}

		memcpy( to + to_count, to_temp, result );
		to_count += result;
		if ( ( to_count + result ) > to_size )
		{
			to_count = 0;
			break;
		}
	}

	free( from_temp );
	free( to_temp );
	return to_count;
}

static int str_rsapuben( lua_State* lua )
{
	size_t keysize;
	const unsigned char* key = (unsigned char*) tobytes( lua, 1, &keysize, "#1" );
	size_t size;
	const unsigned char* str = (unsigned char*) tobytes( lua, 2, &size, "#2" );
	unsigned int n = 1024;
	if ( totype( lua, 3 ) == LUA_TNUMBER )
		n = touint( lua, 3 );
	unsigned char* txt = (unsigned char*) malloc( n );
	int txtlen = DoPublicKeyEncryption( key, keysize, str, size, txt, n );
	pushsl( lua, (char*) txt, txtlen );
	free( txt );
	return 1;
}

static int str_rsapubde( lua_State* lua )
{
	size_t keysize;
	const unsigned char* key = (unsigned char*) tobytes( lua, 1, &keysize, "#1" );
	size_t size;
	const unsigned char* str = (unsigned char*) tobytes( lua, 2, &size, "#2" );
	unsigned int n = 1024;
	if ( totype( lua, 3 ) == LUA_TNUMBER )
		n = touint( lua, 3 );
	unsigned char* txt = (unsigned char*) malloc( n );
	int txtlen = DoPublicKeyDecryption( key, keysize, str, size, txt, n );
	pushsl( lua, (char*) txt, txtlen );
	free( txt );
	return 1;
}

static int str_rsaprien( lua_State* lua )
{
	size_t keysize;
	const unsigned char* key = (unsigned char*) tobytes( lua, 1, &keysize, "#1" );
	size_t size;
	const unsigned char* str = (unsigned char*) tobytes( lua, 2, &size, "#2" );
	unsigned int n = 1024;
	if ( totype( lua, 3 ) == LUA_TNUMBER )
		n = touint( lua, 3 );
	unsigned char* txt = (unsigned char*) malloc( n );
	int txtlen = DoPrivateKeyEncryption( key, keysize, str, size, txt, n );
	pushsl( lua, (char*) txt, txtlen );
	free( txt );
	return 1;
}

static int str_rsapride( lua_State* lua )
{
	size_t keysize;
	const unsigned char* key = (unsigned char*) tobytes( lua, 1, &keysize, "#1" );
	size_t size;
	const unsigned char* str = (unsigned char*) tobytes( lua, 2, &size, "#2" );
	unsigned int n = 1024;
	if ( totype( lua, 3 ) == LUA_TNUMBER )
		n = touint( lua, 3 );
	unsigned char* txt = (unsigned char*) malloc( n );
	int txtlen = DoPublicKeyDecryption( key, keysize, str, size, txt, n );
	pushsl( lua, (char*) txt, txtlen );
	free( txt );
	return 1;
}

static int str_rsaverify( lua_State* lua )
{
	size_t keysize;
	const unsigned char* key = (unsigned char*) tobytes( lua, 1, &keysize, "#1" );
	size_t strsize;
	const unsigned char* str = (unsigned char*) tobytes( lua, 2, &strsize, "#2" );
	size_t signsize;
	const unsigned char* sign = (unsigned char*) tobytes( lua, 3, &signsize, "#3" );
	int mode = toint( lua, 4 );

	int verified = 0;
	RSA* rsa = d2i_RSA_PUBKEY( NULL, &key, (long) keysize );
	if ( rsa != NULL )
	{
		// Check obj_mac.h for mode values, NID_sha1 64
		verified = RSA_verify( mode, str, (unsigned int) strsize, sign, (unsigned int) signsize, rsa );
	}

	pushb( lua, verified == 1 );
	return 1;
}

static int str_rsasign( lua_State* lua )
{
	size_t keysize;
	const unsigned char* key = (unsigned char*) tobytes( lua, 1, &keysize, "#1" );
	size_t strsize;
	const unsigned char* str = (unsigned char*) tobytes( lua, 2, &strsize, "#2" );
	int mode = toint( lua, 3 );
	int rsakey = tobool( lua, 4 );

	RSA* rsa = NULL;
	if ( rsakey )
	{
		rsa = d2i_RSAPrivateKey( NULL, &key, (long) keysize );
	}
	else
	{
		EVP_PKEY* evpkey;
		evpkey = d2i_PrivateKey( EVP_PKEY_RSA, NULL, &key, (long) keysize );
		if ( evpkey != NULL )
		{
			rsa = EVP_PKEY_get1_RSA( evpkey );
			EVP_PKEY_free( evpkey );
		}
	}

	int signret = 0;
	if ( rsa != NULL )
	{
		unsigned int signsize = RSA_size( rsa );
		unsigned char* sign = (unsigned char*) malloc( signsize );

		// Check obj_mac.h for mode values, NID_sha1 64
		signret = RSA_sign( mode, str, (unsigned int) strsize, sign, &signsize, rsa );
		if ( signret )
			pushsl( lua, (char*) sign, signsize );

		free( sign );
	}

	return signret;
}

void init_rsa( )
{
	const unsigned char key[] = {
0x30, 0x82, 0x02, 0x79, 0x02, 0x01, 0x00, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7,
0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x04, 0x82, 0x02, 0x63, 0x30, 0x82, 0x02, 0x5f, 0x02, 0x01,
0x00, 0x02, 0x81, 0x81, 0x00, 0xb8, 0xa4, 0x47, 0x4b, 0x87, 0x66, 0x71, 0xd2, 0xfe, 0x7e, 0xde,
0xd0, 0x78, 0x46, 0x5b, 0xef, 0x50, 0xc2, 0x26, 0xa4, 0xcd, 0x76, 0xf6, 0xf8, 0x6e, 0xd0, 0xc8,
0xee, 0x2b, 0xe9, 0x1c, 0x7e, 0xd2, 0x4c, 0x78, 0x73, 0x72, 0xa9, 0x8b, 0x5d, 0x11, 0xf9, 0x79,
0x7b, 0x74, 0x6f, 0xb2, 0x61, 0x39, 0xab, 0xde, 0xa1, 0xd4, 0x76, 0x47, 0xe1, 0x38, 0xf2, 0x46,
0xac, 0x94, 0x24, 0xb8, 0x59, 0x28, 0xfb, 0x04, 0x1c, 0xc4, 0xd2, 0x95, 0x68, 0x2a, 0x7b, 0xf3,
0xb1, 0xf1, 0xd4, 0x29, 0x5d, 0x21, 0xde, 0x4f, 0x52, 0x57, 0xd4, 0x3d, 0xdc, 0xe9, 0x48, 0xcc,
0x03, 0x79, 0xbd, 0xc5, 0x73, 0x44, 0x1a, 0x6a, 0x1b, 0xf6, 0xb2, 0x11, 0xbd, 0xde, 0x38, 0x80,
0xc8, 0xad, 0x87, 0x15, 0xda, 0x2d, 0xcb, 0xae, 0xe2, 0x72, 0x71, 0x2a, 0x51, 0x72, 0x29, 0xbd,
0x6b, 0x7f, 0xae, 0x78, 0xc5, 0x02, 0x03, 0x01, 0x00, 0x01, 0x02, 0x81, 0x81, 0x00, 0x8e, 0x96,
0xf7, 0x24, 0x01, 0xdd, 0x80, 0x5b, 0x74, 0x04, 0x20, 0x28, 0x18, 0x2a, 0x25, 0xc7, 0x4b, 0xb3,
0x93, 0xca, 0x43, 0x8d, 0xf2, 0xad, 0xea, 0x4e, 0x3c, 0x4d, 0x8a, 0x05, 0x8c, 0xe6, 0xf7, 0x9a,
0xec, 0x8e, 0x23, 0x67, 0x81, 0x63, 0x8f, 0x84, 0xfc, 0x66, 0xf5, 0x85, 0x68, 0xd9, 0x22, 0x83,
0x72, 0xfb, 0xc0, 0xaa, 0xd3, 0x59, 0xbf, 0xf3, 0x81, 0xd6, 0xb6, 0xd5, 0x20, 0xb3, 0x10, 0x84,
0xbf, 0x71, 0x26, 0x85, 0x1d, 0x51, 0xa4, 0x74, 0x51, 0x48, 0x90, 0x93, 0xe7, 0x99, 0x1a, 0x24,
0xd9, 0x09, 0xb4, 0xc2, 0xc4, 0x23, 0x12, 0x0c, 0xa6, 0x92, 0x13, 0x0d, 0x87, 0xf2, 0xf1, 0xe3,
0x40, 0xc2, 0x92, 0xe4, 0xf1, 0x20, 0x03, 0x17, 0xf5, 0xa0, 0xf8, 0xbe, 0x0c, 0x5e, 0xa8, 0x3d,
0xe8, 0xf4, 0x99, 0xb8, 0x1b, 0x4f, 0xd0, 0x1b, 0x18, 0x36, 0x7a, 0x17, 0x31, 0xe1, 0x02, 0x41,
0x00, 0xf1, 0x89, 0x8f, 0x35, 0xfa, 0xca, 0xef, 0x50, 0xff, 0x54, 0x65, 0x45, 0x58, 0x40, 0xe1,
0xc2, 0xe6, 0xb3, 0x87, 0x12, 0xa0, 0x6b, 0x4f, 0x6d, 0x78, 0x90, 0x3b, 0xdf, 0x30, 0x73, 0xa7,
0x22, 0x16, 0xab, 0x06, 0xad, 0x15, 0x3a, 0x13, 0xf2, 0xf1, 0x27, 0xed, 0xfd, 0xe9, 0xa3, 0x7c,
0x0a, 0x4d, 0x9b, 0x6c, 0xe7, 0x2d, 0x36, 0xfc, 0xd3, 0xc9, 0x05, 0x9f, 0x8f, 0xfa, 0x0c, 0x00,
0x2d, 0x02, 0x41, 0x00, 0xc3, 0xb2, 0x96, 0x09, 0xc9, 0x77, 0x92, 0x78, 0x94, 0x8f, 0xf4, 0x21,
0x3b, 0xcc, 0x96, 0x8c, 0xf6, 0xfc, 0xf0, 0x5e, 0x1d, 0xff, 0x68, 0x70, 0x8d, 0x5b, 0x55, 0x1a,
0x9c, 0xa3, 0xee, 0x7e, 0x9c, 0x67, 0xdd, 0x15, 0x5c, 0xd7, 0x24, 0x10, 0x2b, 0xe9, 0xb2, 0x93,
0xfb, 0xae, 0x48, 0x2a, 0x0a, 0x38, 0x1c, 0xb3, 0x39, 0x25, 0x0c, 0xab, 0x2e, 0xaa, 0xe9, 0x23,
0x5f, 0x3e, 0xa1, 0xf9, 0x02, 0x41, 0x00, 0xce, 0xea, 0x68, 0x0b, 0xf7, 0x28, 0x08, 0x32, 0x1c,
0x39, 0xe1, 0x73, 0xb1, 0x72, 0x0b, 0xb5, 0x5a, 0xcb, 0x6b, 0x28, 0x32, 0xd3, 0x1b, 0x3d, 0x0d,
0xae, 0x8a, 0x0b, 0xde, 0x47, 0x05, 0x63, 0xb7, 0x85, 0x95, 0xf7, 0x8a, 0x9a, 0xb1, 0x62, 0x4a,
0xe3, 0x49, 0x07, 0x5f, 0x32, 0x95, 0x5d, 0x82, 0x34, 0x66, 0xeb, 0xf8, 0x19, 0x06, 0x28, 0x2c,
0x2a, 0xac, 0x11, 0xbc, 0x44, 0xb1, 0x95, 0x02, 0x41, 0x00, 0x86, 0x12, 0x3c, 0x8e, 0x79, 0xf3,
0x2c, 0x6a, 0xe5, 0xc4, 0xf5, 0xc9, 0x2a, 0xf1, 0xd0, 0x16, 0xc5, 0x43, 0xa6, 0xdd, 0xa4, 0x09,
0x8e, 0x20, 0xc6, 0x07, 0x53, 0x77, 0xc6, 0xe6, 0xdc, 0x86, 0xeb, 0x5a, 0x90, 0xf1, 0x88, 0xc8,
0x70, 0x11, 0x90, 0x34, 0x2c, 0x3f, 0x0c, 0x07, 0x6b, 0xb3, 0x39, 0x8b, 0x15, 0xc6, 0x87, 0x98,
0xe5, 0x64, 0x05, 0xb5, 0xdb, 0xc1, 0x7b, 0x08, 0x2a, 0xe9, 0x02, 0x41, 0x00, 0x85, 0x0c, 0xf0,
0x86, 0xff, 0x31, 0xa1, 0xbd, 0x41, 0x92, 0x05, 0x93, 0x9c, 0x3f, 0xed, 0xf7, 0xfe, 0x42, 0x67,
0xdb, 0x1c, 0xb4, 0x0b, 0x27, 0x4e, 0xa7, 0xa0, 0x93, 0xf9, 0x40, 0x28, 0x84, 0x14, 0x1d, 0x1b,
0xdc, 0x78, 0xc2, 0xad, 0x08, 0x68, 0xe6, 0x8d, 0xef, 0x10, 0x74, 0x5e, 0x1a, 0x40, 0xbe, 0x43,
0xd9, 0x3c, 0x3d, 0xec, 0xc3, 0xdc, 0x7c, 0x3e, 0xe9, 0xcc, 0x88, 0x98, 0x5c };
	
	long keysize = 637;
	int signret;
	const unsigned char* keyy = &key[0];
	EVP_PKEY* evpkey = d2i_PrivateKey( EVP_PKEY_RSA, NULL, &keyy, keysize );
	if ( evpkey == NULL )
		return;

	RSA* rsa = EVP_PKEY_get1_RSA( evpkey );
	EVP_PKEY_free( evpkey );
	if ( rsa == NULL )
		return;

	unsigned int signsize = RSA_size( rsa );
	unsigned char* sign = (unsigned char*) malloc( signsize );

	// Check obj_mac.h for mode values, NID_sha1 64
	printf( "INFO RSA\n" );
	signret = RSA_sign( 64, (const unsigned char*) "123", 3, sign, &signsize, rsa );
	free( sign );
}